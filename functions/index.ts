// Auto-generated by sanitizeGeneratedFiles
export async function onRequest(context) {
try {
const { request } = context;
const { method } = request;
if (method !== 'POST') {
return new Response('Method Not Allowed', { status: 405 });
}
const data = await request.json();
const resume = await generateResumeTemplate(data);
return new Response(JSON.stringify({ success: true, resume }), {
headers: { 'Content-Type': 'application/json' },
});
} catch (error) {
return new Response(JSON.stringify({ success: false, error: error.message }), {
headers: { 'Content-Type': 'application/json' },
status: 500,
});
}
}
async function generateResumeTemplate(data) {
return { template: 'Generated Resume Template', data };
}

export async function onRequest(context) {
const { request } = context;
const { method } = request;
const url = new URL(request.url);
const userId = url.searchParams.get('userId');
if (!userId) {
return new Response('User ID is required', { status: 400 });
}
switch (method) {
case 'GET':
return getUserProfile(userId);
case 'PUT':
return updateUserProfile(request, userId);
default:
return new Response('Method Not Allowed', { status: 405 });
}
}
async function getUserProfile(userId) {
const userProfile = { userId, name: 'John Doe', email: 'john.doe@example.com' };
return new Response(JSON.stringify(userProfile), {
headers: { 'Content-Type': 'application/json' },
});
}
async function updateUserProfile(request, userId) {
const data = await request.json();
const updatedProfile = { userId, ...data };
return new Response(JSON.stringify(updatedProfile), {
headers: { 'Content-Type': 'application/json' },
});
}

export async function onRequest(context) {
const { request } = context;
const { method } = request;
const url = new URL(request.url);
const userId = url.searchParams.get('userId');
if (!userId) {
return new Response('User ID is required', { status: 400 });
}
switch (method) {
case 'GET':
return getSubscription(userId);
case 'POST':
return createSubscription(request, userId);
case 'DELETE':
return cancelSubscription(userId);
default:
return new Response('Method Not Allowed', { status: 405 });
}
}
async function getSubscription(userId) {
const subscription = { userId, plan: 'Pro', status: 'Active' };
return new Response(JSON.stringify(subscription), {
headers: { 'Content-Type': 'application/json' },
});
}
async function createSubscription(request, userId) {
const data = await request.json();
const newSubscription = { userId, ...data };
return new Response(JSON.stringify(newSubscription), {
headers: { 'Content-Type': 'application/json' },
});
}
async function cancelSubscription(userId) {
return new Response(JSON.stringify({ userId, status: 'Cancelled' }), {
headers: { 'Content-Type': 'application/json' },
});
}